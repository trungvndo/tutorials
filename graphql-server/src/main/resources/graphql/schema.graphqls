type Query {
    bookById(id: ID): Book
    books(filter: BookFilter): [Book!]!
    bookstores: [BookStore!]!
}

type Mutation {
    addBook(input: BookInput): Book!
    deleteBook(id: ID): Book!
}

type Subscription {
    getLatestPurchasedBook: Book!
}

input BookInput {
    name: String!
    pageCount: Int
    category: Category!
    authorId: ID!
}

input BookFilter {
    category: Category
    authorId: String
}

type Book {
    id: ID!
    name: String!
    pageCount: Int
    category: Category!
    author: Author
}

enum Category {
    FICTION,
    NONFICTION,
    BIOGRAPHY,
    LANGUAGE
}

type Author {
    id: ID!
    firstName: String!
    lastName: String!
}

interface BookStore {
     id: ID!
     name: String!
}

type DigitalBookStore implements BookStore {
    id: ID!
    name: String!
    website: String!
}

type PhysicalBookStore implements BookStore {
    id: ID!
    name: String!
    address: String!
    owner: Person!
}

type Person {
    id: ID!
    name: String!
}